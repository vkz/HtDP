#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 67 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 41 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1           0 1448 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 58 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 58 29 1 #"\n"
0 0 24 3 7 #"#reader"
0 0 22 3 1 #"("
0 0 14 3 3 #"lib"
0 0 58 3 1 #" "
0 0 19 3 25 #"\"htdp-advanced-reader.ss\""
0 0 58 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 22 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 58 3 1 #" "
0 0 14 3 22 #"|sort vector in place|"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"read-case-sensitive"
0 0 58 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"teachpacks"
0 0 58 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"lib"
0 0 58 3 1 #" "
0 0 19 3 10 #"\"image.ss\""
0 0 58 3 1 #" "
0 0 19 3 11 #"\"teachpack\""
0 0 58 3 1 #" "
0 0 19 3 7 #"\"2htdp\""
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lib"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"universe.ss\""
0 0 58 3 1 #" "
0 0 19 3 11 #"\"teachpack\""
0 0 58 3 1 #" "
0 0 19 3 7 #"\"2htdp\""
0 0 22 3 3 #")))"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"htdp-settings"
0 0 58 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 2 #"#t"
0 0 58 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 58 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 58 3 1 #" "
0 0 20 3 2 #"#t"
0 0 58 3 1 #" "
0 0 20 3 2 #"#t"
0 0 58 3 1 #" "
0 0 14 3 4 #"none"
0 0 58 3 1 #" "
0 0 20 3 2 #"#f"
0 0 58 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"lib"
0 0 58 3 1 #" "
0 0 19 3 10 #"\"image.ss\""
0 0 58 3 1 #" "
0 0 19 3 11 #"\"teachpack\""
0 0 58 3 1 #" "
0 0 19 3 7 #"\"2htdp\""
0 0 22 3 1 #")"
0 0 58 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lib"
0 0 58 3 1 #" "
0 0 19 3 13 #"\"universe.ss\""
0 0 58 3 1 #" "
0 0 19 3 11 #"\"teachpack\""
0 0 58 3 1 #" "
0 0 19 3 7 #"\"2htdp\""
0 0 22 3 5 #")))))"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 17 3 37 #";; simplest possible sort with insert"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"in-place-sort"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 17 3 43 #";; sort-aux : (vectorof number) N  ->  void"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 52 #";; effect: to sort the interval [0,i) of V in place "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 29 1 #"\n"
0 0 57 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #")]"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 33 #";; sort the segment [0,(sub1 i)):"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 51 #";; insert (vector-ref V (sub1 i)) into the segment "
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 36 #";; [0,i) so that it becomes sorted''"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 6 #")))]))"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 41 #";; insert : N (vectorof number)  ->  void"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 56 #";; to place the value in the i-th into its proper place "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 29 #";; in the [0,i] segement of V"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 57 29 1 #"\n"
0 0 57 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #")]"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 57 3 1 #" "
0 0 57 29 1 #"\n"
0 0 57 3 23 #"                       "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 57 29 1 #"\n"
0 0 57 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 4 #"swap"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 29 1 #"\n"
0 0 57 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #")))]"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 6 #")])]))"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 32 #";; swap : (vectorof X) N N void "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"swap"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 1 #")"
0 0 57 29 1 #"\n"
0 0 57 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 57 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 14 3 4 #"temp"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 57 29 1 #"\n"
0 0 57 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 2 #"))"
0 0 57 29 1 #"\n"
0 0 57 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"j"
0 0 57 3 1 #" "
0 0 14 3 4 #"temp"
0 0 22 3 5 #")))))"
0 0 57 29 1 #"\n"
0 0 57 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 4 #"))))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 17 3 58
#";; one more simple insert sort that shifts already sorted "
0 0 58 29 1 #"\n"
0 0 17 3 47 #";; values to the right to make space for insert"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"in-place-sort-shift"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 17 3 43 #";; sort-aux : (vectorof number) N  ->  void"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 52 #";; effect: to sort the interval [0,i) of V in place "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 29 1 #"\n"
0 0 57 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #")]"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 33 #";; sort the segment [0,(sub1 i)):"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 51 #";; insert (vector-ref V (sub1 i)) into the segment "
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 36 #";; [0,i) so that it becomes sorted''"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 6 #")))]))"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 41 #";; insert : N (vectorof number)  ->  void"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 70
(
 #";; to place the value (d) initially in the i-th into its proper plac"
 #"e "
) 0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 29 #";; in the [0,i] segement of V"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 57 29 1 #"\n"
0 0 57 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 2 #")]"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 57 29 1 #"\n"
0 0 57 3 23 #"                       "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 57 29 1 #"\n"
0 0 57 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 57 29 1 #"\n"
0 0 57 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #")))]"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 7 #")])])))"
0 0 57 29 1 #"\n"
0 0 57 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 4 #"))))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 17 3 60
#";; simplest possible sort with insert and auxilary functions"
0 0 58 29 1 #"\n"
0 0 17 3 51 #";; reversed i.e. the right half of vector is sorted"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"in-place-sort-right"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 17 3 43 #";; sort-aux : (vectorof number) N  ->  void"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 52 #";; effect: to sort the interval [0,i) of V in place "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 29 1 #"\n"
0 0 57 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 5 #"zero?"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #")]"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 51 #";; insert (vector-ref V (sub1 i)) into the segment "
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 52 #";; [(sub1 i),(length V)) so that it becomes sorted''"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 17 3 33 #";; sort the segment [0,(sub1 i)):"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 6 #")))]))"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 41 #";; insert : N (vectorof number)  ->  void"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 70
(
 #";; to place the value (d) initially in the i-th into its proper plac"
 #"e "
) 0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 17 3 29 #";; in the [0,i] segement of V"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 14 3 10 #"VECTOR-END"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 3 #")))"
0 0 57 29 1 #"\n"
0 0 57 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 57 29 1 #"\n"
0 0 57 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 14 3 10 #"VECTOR-END"
0 0 22 3 1 #")"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 2 #")]"
0 0 57 29 1 #"\n"
0 0 57 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 57 29 1 #"\n"
0 0 57 3 23 #"                       "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 57 29 1 #"\n"
0 0 57 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 57 29 1 #"\n"
0 0 57 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #")))]"
0 0 57 29 1 #"\n"
0 0 57 3 22 #"                      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 57 3 1 #" "
0 0 14 3 1 #"i"
0 0 57 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 7 #")])])))"
0 0 57 29 1 #"\n"
0 0 57 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"sort-aux"
0 0 57 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 57 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 4 #"))))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 17 3 17 #";; in place qsort"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 17 3 51 #";; qsort : (vectorof number)  ->  (vectorof number)"
0 0 58 29 1 #"\n"
0 0 17 3 70
(
 #";; effect: to modify V such that it contains the same items as befor"
 #"e,"
) 0 0 58 29 1 #"\n"
0 0 17 3 23 #";; in ascending order  "
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"qsort-in-place"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"qsort-aux"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 20 3 1 #"0"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 4 #"))))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 17 3 59
#";; qsort-aux : (vectorof number) N N  ->  (vectorof number)"
0 0 58 29 1 #"\n"
0 0 17 3 53 #";; effect: sort the interval [left,right] of vector V"
0 0 58 29 1 #"\n"
0 0 17 3 23 #";; generative recursion"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"qsort-aux"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 2 #">="
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 22 3 1 #"]"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 18 #"new-pivot-position"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"partition"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 3 #")))"
0 0 56 29 1 #"\n"
0 0 56 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"qsort-aux"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 56 3 1 #" "
0 0 14 3 18 #"new-pivot-position"
0 0 22 3 2 #"))"
0 0 56 29 1 #"\n"
0 0 56 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 9 #"qsort-aux"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 56 3 1 #" "
0 0 14 3 18 #"new-pivot-position"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 6 #")))]))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 17 3 43 #";; partition : (vectorof number) N N  ->  N"
0 0 58 29 1 #"\n"
0 0 17 3 56 #";; to determine the proper position p of the pivot-item "
0 0 58 29 1 #"\n"
0 0 17 3 42 #";; effect: rearrange the vector V so that "
0 0 58 29 1 #"\n"
0 0 17 3 64
#";; -- all items in V in [left,p) are smaller than the pivot item"
0 0 58 29 1 #"\n"
0 0 17 3 64
#";; -- all items of V in (p,right] are larger than the pivot item"
0 0 58 29 1 #"\n"
0 0 17 3 23 #";; generative recursion"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"partition"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 14 #"pivot-position"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 2 #"))"
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"partition-aux"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 9 #"new-right"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-new-right"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 2 #"))"
0 0 56 29 1 #"\n"
0 0 56 3 20 #"                    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 8 #"new-left"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"find-new-left"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 3 #")))"
0 0 56 29 1 #"\n"
0 0 56 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 56 29 1 #"\n"
0 0 56 3 16 #"                "
0 0 22 3 2 #"[("
0 0 14 3 2 #">="
0 0 56 3 1 #" "
0 0 14 3 8 #"new-left"
0 0 56 3 1 #" "
0 0 14 3 9 #"new-right"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 56 29 1 #"\n"
0 0 56 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 4 #"swap"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 14 #"pivot-position"
0 0 56 3 1 #" "
0 0 14 3 9 #"new-right"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 19 #"                   "
0 0 14 3 9 #"new-right"
0 0 22 3 2 #")]"
0 0 56 29 1 #"\n"
0 0 56 3 16 #"                "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 56 3 1 #" "
0 0 17 3 24 #"; (< new-left new-right)"
0 0 56 29 1 #"\n"
0 0 56 3 17 #"                 "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 56 29 1 #"\n"
0 0 56 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 4 #"swap"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 8 #"new-left"
0 0 56 3 1 #" "
0 0 14 3 9 #"new-right"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 13 #"partition-aux"
0 0 56 3 1 #" "
0 0 14 3 8 #"new-left"
0 0 56 3 1 #" "
0 0 14 3 9 #"new-right"
0 0 22 3 7 #"))]))))"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"partition-aux"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 3 #")))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 17 3 32 #";; swap : (vectorof X) N N void "
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"swap"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 1 #"i"
0 0 56 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 4 #"temp"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 56 29 1 #"\n"
0 0 56 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 1 #"i"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 1 #"j"
0 0 22 3 2 #"))"
0 0 56 29 1 #"\n"
0 0 56 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 1 #"j"
0 0 56 3 1 #" "
0 0 14 3 4 #"temp"
0 0 22 3 4 #"))))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 17 3 65
#";; find-new-right : (vectorof number) number N N [>= left]  ->  N"
0 0 58 29 1 #"\n"
0 0 17 3 61
#";; to determine an index i between left and right (inclusive)"
0 0 58 29 1 #"\n"
0 0 17 3 49 #";; such that (< (vector-ref V i) the-pivot) holds"
0 0 58 29 1 #"\n"
0 0 17 3 33 #";; structural recursion: see text"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"find-new-boundary"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 14 3 6 #"cmp-op"
0 0 56 3 1 #" "
0 0 14 3 15 #"search-for-side"
0 0 56 3 1 #" "
0 0 14 3 10 #"other-side"
0 0 56 3 1 #" "
0 0 14 3 7 #"incr-op"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 1 #" "
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 56 3 1 #" "
0 0 14 3 15 #"search-for-side"
0 0 56 3 1 #" "
0 0 14 3 10 #"other-side"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 15 #"search-for-side"
0 0 22 3 1 #"]"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 56 29 1 #"\n"
0 0 56 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"cmp-op"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 15 #"search-for-side"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 15 #"search-for-side"
0 0 22 3 1 #"]"
0 0 56 29 1 #"\n"
0 0 56 3 12 #"            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"find-new-boundary"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 14 3 6 #"cmp-op"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"incr-op"
0 0 56 3 1 #" "
0 0 14 3 15 #"search-for-side"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 14 3 10 #"other-side"
0 0 56 3 1 #" "
0 0 14 3 7 #"incr-op"
0 0 22 3 6 #")])]))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-new-right"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 17 #"find-new-boundary"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 14 3 1 #"<"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 4 #"sub1"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"find-new-left"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 17 #"find-new-boundary"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 56 3 1 #" "
0 0 14 3 1 #">"
0 0 56 3 1 #" "
0 0 14 3 4 #"left"
0 0 56 3 1 #" "
0 0 14 3 5 #"right"
0 0 56 3 1 #" "
0 0 14 3 4 #"add1"
0 0 22 3 2 #"))"
0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 7         919 58           0 0           0 152 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-new-right"
0 0 2 3 1 #" "
0 0 14 3 1 #"V"
0 0 2 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 1 #"<"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 1 #"V"
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-new-right"
0 0 2 3 1 #" "
0 0 14 3 1 #"V"
0 0 2 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 7 #"))])]))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"find-new-left"
0 0 2 3 1 #" "
0 0 14 3 1 #"V"
0 0 2 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 1 #"V"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"find-new-left"
0 0 2 3 1 #" "
0 0 14 3 1 #"V"
0 0 2 3 1 #" "
0 0 14 3 9 #"the-pivot"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 2 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 6 #")])]))"
0 0 2 29 1 #"\n"
0           0 0 0 58 29 1 #"\n"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 17 3 61
#";; call main and pass it desired vector length and a sorting "
0 0 58 29 1 #"\n"
0 0 17 3 55 #";; function. It'll generate a random vector and sort it"
0 0 58 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 58 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"main"
0 0 56 3 1 #" "
0 0 14 3 8 #"v-length"
0 0 56 3 1 #" "
0 0 14 3 16 #"sorting-function"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 56 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 56 3 1 #" "
0 0 14 3 8 #"v-length"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"random"
0 0 56 3 1 #" "
0 0 14 3 8 #"v-length"
0 0 22 3 4 #"))))"
0 0 56 29 1 #"\n"
0 0 56 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 56 3 1 #" "
0 0 14 3 7 #"sortedV"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 56 3 1 #" "
0 0 14 3 8 #"v-length"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 56 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 5 #")))))"
0 0 56 29 1 #"\n"
0 0 56 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 56 3 1 #" "
0 0 56 29 1 #"\n"
0 0 56 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 16 #"sorting-function"
0 0 56 3 1 #" "
0 0 14 3 7 #"sortedV"
0 0 22 3 1 #")"
0 0 56 29 1 #"\n"
0 0 56 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 56 3 1 #" "
0 0 14 3 1 #"V"
0 0 56 3 1 #" "
0 0 14 3 7 #"sortedV"
0 0 22 3 4 #"))))"
0 0 58 29 1 #"\n"
0           0
